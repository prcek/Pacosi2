#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const config = require('../config');
const mongoose = require('mongoose');
const { ApolloEngine } = require('apollo-engine');
/**
 * Get port from environment and store in Express.
 */



mongoose.Promise = require('bluebird');
var mongo_options = {
  autoReconnect: true,
  reconnectTries: Number.MAX_VALUE,
  reconnectInterval: 1000,
  useMongoClient: true
};
console.log("MONGODB_HOST",config.database.HOST)
mongoose.connect( config.database.HOST, mongo_options);

var port = normalizePort(config.server.PORT);
app.set('port', port);



if (!config.server.APOLLO_API_KEY) {
  console.log("APOLLO_ENGINE is OFF");
  var server = http.createServer(app);


  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

} else {  
    const engine = new ApolloEngine({
      apiKey: config.server.APOLLO_API_KEY
    });
  
    engine.listen({
      port: port,
      expressApp: app,
    },()=>{
      console.log(`Listening on port ${port}!`);
    });

    engine.on('error', err => {
      console.log('There was an error starting the server or Engine.');
      console.error(err);

      // The app failed to start, we probably want to kill the server
      process.exit(1);
    });

}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
